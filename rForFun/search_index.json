[["inkscaper.html", "Chapter 8 SVG path analysis in R 8.1 Simple Features from SVG 8.2 Surface from SVG 8.3 Animation from SVG", " Chapter 8 SVG path analysis in R Scalable Vector Graphics, abbreviated: SVG, is an XML-based file format for static and dynamic vector graphics. It is an open standard of the W3C. As far there is no easy way to import SVG file, convert it into Simple Features and analyze using R. That’s why we gonna use an external powerful and beautiful tool which is Inkscape. Inkscape is an open source vector illustration program that uses the SVG format to store vector graphics. We start our analyses from checking Inkscape installation: system(&#39;inkscape --version&#39;, intern = TRUE) ## [1] &quot;Inkscape 1.0.2-2 (e86c870879, 2021-01-15)&quot; This is the Scalable Vector Graphic we want to analyze: url &lt;- &#39;https://upload.wikimedia.org/wikipedia/commons/1/1b/Red_Bird.svg&#39; knitr::include_graphics(url) 8.1 Simple Features from SVG Function to convert SVG into DXF is_url &lt;- function(path){ grepl(&quot;^https?://&quot;, path) } download_svg &lt;- function(url){ filename = tempfile(&quot;inx&quot;, fileext = &quot;.svg&quot;) download.file(url, filename) return(filename) } inx_extension &lt;- function(input, extension, ext){ path = system(&#39;inkscape --system-data-directory&#39;, intern = TRUE) inkscape_extensions_path = paste(path, &quot;\\\\extensions&quot;, sep = &quot;&quot;) inkscape_python_home = paste(gsub(&quot;\\\\share\\\\inkscape&quot;, &quot;&quot;, path, fixed = T), &quot;\\\\bin&quot;, sep = &quot;&quot;) if(is_url(input)) { input_file_path = download_svg(input) } else { input_file_path = tempfile(&quot;inx&quot;) file.copy(input, input_file_path) } output = tempfile(&quot;inx&quot;, fileext = ext) command = tempfile(pattern = &quot;inx_&quot;, fileext = &quot;.bat&quot;) &#39;@ECHO OFF cd %s python.exe &quot;%s&quot; --output=&quot;%s&quot; &quot;%s&quot;&#39; %&gt;% sprintf( inkscape_python_home, paste(inkscape_extensions_path, extension, sep = &quot;\\\\&quot;), output, input_file_path) %&gt;% writeLines(command) system(command) output } with it’s Linux equivalent: inx_extension &lt;- function(input, extension, ext){ path = system(&#39;inkscape --system-data-directory&#39;, intern = TRUE) inkscape_extensions_path = paste(path, &quot;/extensions&quot;, sep = &quot;&quot;) if(is_url(input)) { input_file_path = download_svg(input) } else { input_file_path = tempfile(&quot;inx&quot;) file.copy(input, input_file_path) } output &lt;- tempfile(&quot;inx&quot;, fileext = ext) command &lt;- sprintf(&#39;python %s --output=&quot;%s&quot; &quot;%s&quot;&#39;, paste(inkscape_extensions_path, extension, sep = &quot;/&quot;), output, input_file_path) system(command, intern = TRUE) output } logo &lt;- inx_extension(input = url, extension = &quot;dxf12_outlines.py&quot;, ext =&quot;.dxf&quot;) %&gt;% st_read() %&gt;% select(geometry) %&gt;% st_union() %&gt;% st_polygonize() %&gt;% first() ## Reading layer `entities&#39; from data source ## `C:\\Users\\jacek\\AppData\\Local\\Temp\\Rtmpm4ZfbP\\inx45f06a981e4f.dxf&#39; ## using driver `DXF&#39; ## Simple feature collection with 8654 features and 6 fields ## Geometry type: LINESTRING ## Dimension: XY ## Bounding box: xmin: 238.9009 ymin: -837.4039 xmax: 1105.521 ymax: 40.07607 ## CRS: NA logo %&gt;% ggplot() + geom_sf() result &lt;- st_sfc() %&gt;% st_sf(geometry = .) for(i in c(1: length(logo))) { tmp &lt;- logo %&gt;% nth(i) %&gt;% st_sfc() %&gt;% st_sf(geometry = .) %&gt;% mutate(element = i) result &lt;- tmp %&gt;% bind_rows(result) } result %&gt;% ggplot() + geom_sf() + geom_sf_label(aes(label = element)) + theme_void() result %&gt;% plot_ly(split = ~element) ## No trace type specified: ## Based on info supplied, a &#39;scatter&#39; trace seems appropriate. ## Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter result %&gt;% st_write(&quot;Red_Bird.shp&quot;, append=FALSE) ## Deleting layer `Red_Bird&#39; using driver `ESRI Shapefile&#39; ## Writing layer `Red_Bird&#39; to data source `Red_Bird.shp&#39; using driver `ESRI Shapefile&#39; ## Writing 93 features with 1 fields and geometry type Polygon. 8.2 Surface from SVG library(rgl) knitr::knit_hooks$set(webgl = hook_webgl) result &lt;- st_read(&quot;Red_Bird.shp&quot;) %&gt;% filter(!element %in% c(3:55, 56:60, 81)) %&gt;% st_union() %&gt;% st_sfc() %&gt;% st_sf() ## Reading layer `Red_Bird&#39; from data source ## `C:\\Users\\jacek\\OneDrive\\Documents\\rForFun\\Red_Bird.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 93 features and 1 field ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 238.9009 ymin: -837.4039 xmax: 1105.521 ymax: 40.07607 ## CRS: NA result %&gt;% ggplot() + geom_sf() grid_spacing = 10 grid &lt;- result %&gt;% st_make_grid(what = &quot;centers&quot;, cellsize = c(grid_spacing, grid_spacing)) %&gt;% st_sf() heights &lt;- st_join(grid, (result %&gt;% select(geometry) %&gt;% mutate(Z = 1))) %&gt;% replace(is.na(.), 0) z &lt;- heights %&gt;% st_coordinates() %&gt;% as_tibble() %&gt;% bind_cols(heights %&gt;% st_drop_geometry()) %&gt;% mutate(X = round(X,1)) %&gt;% mutate(Y = round(Y,1)) %&gt;% pivot_wider(names_from = Y, values_from = Z) %&gt;% column_to_rownames(&quot;X&quot;) %&gt;% as.matrix() x &lt;- 1:nrow(z) y &lt;- 1:ncol(z) colorlut &lt;- c(&quot;#F2F2F2&quot;, &quot;#E34234&quot;) #&quot;#ECB176&quot;, col &lt;- colorlut[ z - min(z) + 1 ] # assign colors to heights for each point surface3d(x, y, z, color = col, back = &quot;lines&quot;) 8.3 Animation from SVG library(gganimate) Red_Bird &lt;- st_read(&quot;Red_Bird.shp&quot;) %&gt;% filter(!element %in% c(3:55, 56:60, 81)) %&gt;% st_union() %&gt;% st_sfc() %&gt;% st_sf() %&gt;% mutate(facet = 1) ## Reading layer `Red_Bird&#39; from data source ## `C:\\Users\\jacek\\OneDrive\\Documents\\rForFun\\Red_Bird.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 93 features and 1 field ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 238.9009 ymin: -837.4039 xmax: 1105.521 ymax: 40.07607 ## CRS: NA tmp &lt;- st_read(&quot;Red_Bird.shp&quot;) %&gt;% filter(element %in% c(3:55, 56:60, 81)) %&gt;% st_union() %&gt;% st_sfc() %&gt;% st_sf() %&gt;% mutate(facet = 2) ## Reading layer `Red_Bird&#39; from data source ## `C:\\Users\\jacek\\OneDrive\\Documents\\rForFun\\Red_Bird.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 93 features and 1 field ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 238.9009 ymin: -837.4039 xmax: 1105.521 ymax: 40.07607 ## CRS: NA Red_Bird &lt;- Red_Bird %&gt;% bind_rows(tmp) %&gt;% mutate(colour = &quot;#E34234&quot;) Red_Bird %&gt;% ggplot() + geom_sf(aes(fill = colour)) + scale_fill_identity() + transition_states( facet, transition_length = 2, state_length = 1 ) + enter_fade() + exit_shrink() + ease_aes(&#39;sine-in-out&#39;) + theme_void() "]]
